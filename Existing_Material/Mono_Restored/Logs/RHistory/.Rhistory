U2.mean <- 0.542
U1.sd <- 0.100
U2.sd <- 0.120
U1.N <- 80
U2.N <- 15
U1.se <- U1.sd / U1.N^0.5
U2.se <- U2.sd / U2.N^0.5
alt.U1.summary <- list(mu=U1.mean, sd=U1.se)
alt.U2.summary <- list(mu=U2.mean, sd=U2.se)
lines(density(rU2), lty="dashed")
lines(density(rU2.raw), lwd=2, lty="dashed")
plot(density(rU1), xlim=c(0.4, 0.7), ylim=c(0,20), main="", xlab="HRQoL", ylab="Density of simulated values")
lines(density(rU2), lty="dashed")
lines(density(rU2.raw), lwd=2, lty="dashed")
mean(rU2)
mean(rU2.raw)
sd(rU2)
sd(rU2.raw)
plot(u2 ~ u1, data=PSA.method10.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 10")
abline(0,1)
?png
split.screen(c(1,3))
screen(1)
plot(u2 ~ u1, data=PSA.method08.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 8")
abline(0,1)
screen(2)
plot(u2 ~ u1, data=PSA.method09.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 9")
abline(0,1)
screen(3)
plot(u2 ~ u1, data=PSA.method10.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 10")
abline(0,1)
close.screen(1:3, T)
dev.off()
png("PSA_alt.png", 900, 300)
split.screen(c(1,3))
screen(1)
plot(u2 ~ u1, data=PSA.method08.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 8")
abline(0,1)
screen(2)
plot(u2 ~ u1, data=PSA.method09.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 9")
abline(0,1)
screen(3)
plot(u2 ~ u1, data=PSA.method10.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 10")
abline(0,1)
close.screen(1:3, T)
dev.off()
png("PSA_alt.png", 600, 600)
split.screen(c(2,2))
screen(1)
plot(density(rU1), xlim=c(0.4, 0.7), ylim=c(0,20), main="", xlab="HRQoL", ylab="Density of simulated values")
lines(density(rU2), lty="dashed")
lines(density(rU2.raw), lwd=2, lty="dashed")
legend("topleft", legend=c("U1", "U2 using difference method", "U2 using independent sampling"), lwd=c(1,1,2), lty=c("solid", "dashed", "dashed"))
screen(2)
plot(u2 ~ u1, data=PSA.method08.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 8")
abline(0,1)
screen(3)
plot(u2 ~ u1, data=PSA.method09.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 9")
abline(0,1)
screen(4)
plot(u2 ~ u1, data=PSA.method10.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 10")
abline(0,1)
close.screen(1:4, T)
dev.off()
png("PSA_alt.png", 800, 800)
split.screen(c(2,2))
screen(1)
plot(density(rU1), xlim=c(0.4, 0.7), ylim=c(0,20), main="", xlab="HRQoL", ylab="Density of simulated values")
lines(density(rU2), lty="dashed")
lines(density(rU2.raw), lwd=2, lty="dashed")
legend("topleft", legend=c("U1", "U2*", "U2"), lwd=c(1,1,2), lty=c("solid", "dashed", "dashed"))
screen(2)
plot(u2 ~ u1, data=PSA.method08.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 8")
abline(0,1)
screen(3)
plot(u2 ~ u1, data=PSA.method09.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 9")
abline(0,1)
screen(4)
plot(u2 ~ u1, data=PSA.method10.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="Method 10")
abline(0,1)
close.screen(1:4, T)
dev.off()
png("PSA_alt.png", 800, 800)
split.screen(c(2,2))
screen(1)
plot(density(rU1), xlim=c(0.4, 0.7), ylim=c(0,20), main="a) Density plot", xlab="HRQoL", ylab="Density of simulated values")
lines(density(rU2), lty="dashed")
lines(density(rU2.raw), lwd=2, lty="dashed")
legend("topleft", legend=c("U1", "U2*", "U2"), lwd=c(1,1,2), lty=c("solid", "dashed", "dashed"))
screen(2)
plot(u2 ~ u1, data=PSA.method08.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="b) Method 8")
abline(0,1)
screen(3)
plot(u2 ~ u1, data=PSA.method09.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="c) Method 9")
abline(0,1)
screen(4)
plot(u2 ~ u1, data=PSA.method10.newData, xlim=c(0.45, 0.7), ylim=c(0.45,0.7),  main="d) Method 10")
abline(0,1)
close.screen(1:4, T)
dev.off()
rm(list=ls())
setwd("X:/Monotonicity/Code/R/")
#load("MattData.rData")
require(MASS)
Data.2D <- data.frame(
U1=
c(0.736, 0.698, 0.756, 0.638, 0.646,
0.619, 0.800, 0.411, 0.664, 0.513,
0.594, 0.371, 0.608, 0.528, 0.823,
0.682, 0.462, 0.576, 0.572, 0.607,
0.542, 0.625, 0.694, 0.512, 0.591,
0.559, 0.588, 0.766, 0.551, 0.256
),
U2=
c(0.700, 0.625, 0.719, 0.594, 0.565,
0.565, 0.779, 0.363, 0.540, 0.500,
0.532, 0.300, 0.572, 0.420, 0.810,
0.650, 0.457, 0.517, 0.495, 0.561,
0.481, 0.610, 0.603, 0.463, 0.551,
0.450, 0.550, 0.647, 0.491, 0.150
)
)
mean(Data.2D$U1);mean(Data.2D$U2)
N.U1 <- length(Data.2D$U1)
N.U2 <- length(Data.2D$U2)
#find 95% CI for U1 and U2
u1.low<-mean(Data.2D$U1)-1.96*sd(Data.2D$U1)/sqrt(N.U1)
u1.up<-mean(Data.2D$U1)+1.96*sd(Data.2D$U1)/sqrt(N.U2)
u2.low<-mean(Data.2D$U2)-1.96*sd(Data.2D$U2)/sqrt(N.U1)
u2.up<-mean(Data.2D$U2)+1.96*sd(Data.2D$U2)/sqrt(N.U2)
u1.low;u1.up;u2.low;u2.up
U1.mean <- 0.600
U2.mean <- 0.542
U1.sd <- 0.100
U2.sd <- 0.120
U1.N <- 80
U2.N <- 15
U1.se <- U1.sd / U1.N^0.5
U2.se <- U2.sd / U2.N^0.5
alt.U1.summary <- list(mu=U1.mean, sd=U1.se)
alt.U2.summary <- list(mu=U2.mean, sd=U2.se)
U1.mean - 1.96 * U1.se
U1.mean + 1.96 * U1.se
U2.mean - 1.96 * U2.se
U2.mean + 1.96 * U2.se
# McTaggart-Cowan
# very Well controlled
#   mean 0.9
#   sd 0.22
#   n 37
# well controlled
# mean 0.84
# sd 0.20
# N 43
#adequately controlled
# mean 0.81
# sd 0.22
# n 54
# not controlled
# mean 0.80
# sd 0.21
# n 22
Dstud.mcTC <- list(
very.well.controlled=list(
mu=0.9,
sd=0.22,
n=37),
well.controlled=list(
mu=0.84,
sd=0.20,
n = 43),
adequately.controlled=list(
mu=0.81,
sd=0.22,
n=54),
not.controlled=list(
mu=0.80,
sd=0.21,
n= 22)
)
#szende
# good control
# mean 0.93
# sd 0.20
# n 16
# mildly reduced control
# mean 0.76
# sd 0.20
# N 28
# moderately reduced control
# mean 0.65
# sd 0.20
# N 36
# poor control
# mean 0.52
# sd 0.20
# N 20
Dstud.szende <- list(
good.control=list(
mu=0.93,
sd=0.20,
n=16),
mildly.reduced.control=list(
mu=0.76,
sd=0.20,
n = 28),
moderately.reduced.control=list(
mu=0.65,
sd=0.20,
n=36),
poor.control=list(
mu=0.52,
sd=0.20,
n= 20)
)
Dstud.mcTC
Dstud.mcTC[[1]]
Dstud.mcTC[[2]]
beta.1 <- estBeta(mu=Dstud.mcTC[[1]]$mu, var=((Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)))^2)
beta.1
beta.2 <- estBeta(mu=Dstud.mcTC[[2]]$mu, var=((Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)))^2)
beta.3 <- estBeta(mu=Dstud.mcTC[[2]]$mu, var=((Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)))^2)
beta.4 <- estBeta(mu=Dstud.mcTC[[2]]$mu, var=((Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)))^2)
beta.dif.12 <- getDifParam(
Dstud.mcTC[[1]]$mu,
(Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n))
Dstud.mcTC[[2]]$mu,
(Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)),
F
)
beta.dif.12 <- getDifParam(
Dstud.mcTC[[1]]$mu,
(Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)),
Dstud.mcTC[[2]]$mu,
(Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)),
F
)
getDifParam <- function(u1.mu, u1.sd, u2.mu, u2.sd, quietly=T){
mu <- u1.mu - u2.mu
sigma2 <- ifelse(u1.sd > u2.sd, u1.sd^2 - u2.sd^2, u2.sd^2 - u1.sd^2)
x <- (1 - mu) / mu
a <- (x/sigma2-1-2*x-x^2)/(1+3*x+3*x^2+x^3)
b<-a*x
if(quietly==F){
print(a/(a+b))  # check mean of delta
print(a*b/(a+b)^2/(a+b+1))  # check variance of delta
}
return(list(a=a, b=b))
}
beta.dif.12 <- getDifParam(
Dstud.mcTC[[1]]$mu,
(Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)),
Dstud.mcTC[[2]]$mu,
(Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)),
F
)
beta.dif.12
beta.dif.13 <- getDifParam(
Dstud.mcTC[[1]]$mu,
(Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)),
Dstud.mcTC[[3]]$mu,
(Dstud.mcTC[[3]]$sd / sqrt(Dstud.mcTC[[3]]$n))
)
beta.dif.13
beta.dif.14 <- getDifParam(
Dstud.mcTC[[1]]$mu,
(Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)),
Dstud.mcTC[[4]]$mu,
(Dstud.mcTC[[4]]$sd / sqrt(Dstud.mcTC[[4]]$n))
)
rMTC.1 <- rbeta(N.psa, MTC.beta.1$a, MTC.beta.1$b)
rMTC.1 <- rbeta(n.PSA, MTC.beta.1$a, MTC.beta.1$b)
# McTaggart-Cowan
# very Well controlled
#   mean 0.9
#   sd 0.22
#   n 37
# well controlled
# mean 0.84
# sd 0.20
# N 43
#adequately controlled
# mean 0.81
# sd 0.22
# n 54
# not controlled
# mean 0.80
# sd 0.21
# n 22
Dstud.mcTC <- list(
very.well.controlled=list(
mu=0.9,
sd=0.22,
n=37),
well.controlled=list(
mu=0.84,
rm(list=ls())
rm(list=ls())
Dstud.mcTC <- list(
very.well.controlled=list(
mu=0.9,
sd=0.22,
n=37),
well.controlled=list(
mu=0.84,
sd=0.20,
n = 43),
adequately.controlled=list(
mu=0.81,
sd=0.22,
n=54),
not.controlled=list(
mu=0.80,
sd=0.21,
n= 22)
)
estBeta <- function(mu, var) {
a <- mu * ((1 - mu) * (mu / var) - 1)
b <- a * ((1 - mu) / mu)
return(list(a=a, b=b))
}
getDifParam <- function(u1.mu, u1.sd, u2.mu, u2.sd, quietly=T){
mu <- u1.mu - u2.mu
sigma2 <- ifelse(u1.sd > u2.sd, u1.sd^2 - u2.sd^2, u2.sd^2 - u1.sd^2)
x <- (1 - mu) / mu
a <- (x/sigma2-1-2*x-x^2)/(1+3*x+3*x^2+x^3)
b<-a*x
if(quietly==F){
print(a/(a+b))  # check mean of delta
print(a*b/(a+b)^2/(a+b+1))  # check variance of delta
}
return(list(a=a, b=b))
}
MTC.beta.1 <- estBeta(mu=Dstud.mcTC[[1]]$mu, var=((Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)))^2)
MTC.beta.2 <- estBeta(mu=Dstud.mcTC[[2]]$mu, var=((Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)))^2)
MTC.beta.3 <- estBeta(mu=Dstud.mcTC[[2]]$mu, var=((Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)))^2)
MTC.beta.4 <- estBeta(mu=Dstud.mcTC[[2]]$mu, var=((Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)))^2)
MTC.beta.1
MTC.beta.2
MTC.beta.3
MTC.beta.4
MTC.beta.1 <- estBeta(mu=Dstud.mcTC[[1]]$mu, var=((Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)))^2)
MTC.beta.2 <- estBeta(mu=Dstud.mcTC[[2]]$mu, var=((Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)))^2)
MTC.beta.3 <- estBeta(mu=Dstud.mcTC[[3]]$mu, var=((Dstud.mcTC[[3]]$sd / sqrt(Dstud.mcTC[[3]]$n)))^2)
MTC.beta.4 <- estBeta(mu=Dstud.mcTC[[4]]$mu, var=((Dstud.mcTC[[4]]$sd / sqrt(Dstud.mcTC[[4]]$n)))^2)
MTC.beta.dif.12 <- getDifParam(
MTC.beta.1
MTC.beta.2
MTC.beta.3
MTC.beta.4
MTC.beta.dif.12 <- getDifParam(
Dstud.mcTC[[1]]$mu,
(Dstud.mcTC[[1]]$sd / sqrt(Dstud.mcTC[[1]]$n)),
Dstud.mcTC[[2]]$mu,
(Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)),
F
)
MTC.beta.dif.12
MTC.beta.dif.23 <- getDifParam(
Dstud.mcTC[[2]]$mu,
(Dstud.mcTC[[2]]$sd / sqrt(Dstud.mcTC[[2]]$n)),
Dstud.mcTC[[3]]$mu,
(Dstud.mcTC[[3]]$sd / sqrt(Dstud.mcTC[[3]]$n))
)
MTC.beta.dif.23
MTC.beta.dif.34 <- getDifParam(
Dstud.mcTC[[3]]$mu,
(Dstud.mcTC[[3]]$sd / sqrt(Dstud.mcTC[[3]]$n)),
Dstud.mcTC[[4]]$mu,
(Dstud.mcTC[[4]]$sd / sqrt(Dstud.mcTC[[4]]$n))
)
MTC.beta.dif.34
#szende
# good control
# mean 0.93
# sd 0.20
# n 16
# mildly reduced control
# mean 0.76
# sd 0.20
# N 28
# moderately reduced control
# mean 0.65
# sd 0.20
# N 36
# poor control
# mean 0.52
# sd 0.20
# N 20
Dstud.S <- list(
good.control=list(
mu=0.93,
sd=0.20,
n=16),
mildly.reduced.control=list(
mu=0.76,
sd=0.20,
n = 28),
moderately.reduced.control=list(
mu=0.65,
sd=0.20,
n=36),
poor.control=list(
mu=0.52,
sd=0.20,
n= 20)
)
S.beta.dif.14 <- getDifParam(
Dstud.S[[1]]$mu,
(Dstud.S[[1]]$sd / sqrt(Dstud.S[[1]]$n)),
Dstud.S[[4]]$mu,
(Dstud.S[[4]]$sd / sqrt(Dstud.S[[4]]$n))
)
#
S.beta.dif.23 <- getDifParam(
Dstud.S[[2]]$mu,
(Dstud.S[[2]]$sd / sqrt(Dstud.S[[2]]$n)),
Dstud.mcTC[[3]]$mu,
(Dstud.mcTC[[3]]$sd / sqrt(Dstud.mcTC[[3]]$n))
)
MTC.beta.dif.34 <- getDifParam(
Dstud.mcTC[[3]]$mu,
(Dstud.mcTC[[3]]$sd / sqrt(Dstud.mcTC[[3]]$n)),
Dstud.mcTC[[4]]$mu,
(Dstud.mcTC[[4]]$sd / sqrt(Dstud.mcTC[[4]]$n))
)
#############
S.beta.1 <- estBeta(mu=Dstud.S[[1]]$mu, var=((Dstud.S[[1]]$sd / sqrt(Dstud.S[[1]]$n)))^2)
S.beta.2 <- estBeta(mu=Dstud.S[[2]]$mu, var=((Dstud.S[[2]]$sd / sqrt(Dstud.S[[2]]$n)))^2)
S.beta.3 <- estBeta(mu=Dstud.S[[3]]$mu, var=((Dstud.S[[3]]$sd / sqrt(Dstud.S[[3]]$n)))^2)
S.beta.4 <- estBeta(mu=Dstud.S[[4]]$mu, var=((Dstud.S[[4]]$sd / sqrt(Dstud.S[[4]]$n)))^2)
S.beta.dif.12 <- getDifParam(
Dstud.S[[1]]$mu,
(Dstud.S[[1]]$sd / sqrt(Dstud.S[[1]]$n)),
Dstud.S[[2]]$mu,
(Dstud.S[[2]]$sd / sqrt(Dstud.S[[2]]$n))
)
S.beta.dif.13 <- getDifParam(
Dstud.S[[1]]$mu,
(Dstud.S[[1]]$sd / sqrt(Dstud.S[[1]]$n)),
Dstud.S[[3]]$mu,
(Dstud.S[[3]]$sd / sqrt(Dstud.S[[3]]$n))
)
S.beta.dif.14 <- getDifParam(
Dstud.S[[1]]$mu,
(Dstud.S[[1]]$sd / sqrt(Dstud.S[[1]]$n)),
Dstud.S[[4]]$mu,
(Dstud.S[[4]]$sd / sqrt(Dstud.S[[4]]$n))
)
#
S.beta.dif.23 <- getDifParam(
Dstud.S[[2]]$mu,
(Dstud.S[[2]]$sd / sqrt(Dstud.S[[2]]$n)),
Dstud.mcTC[[3]]$mu,
(Dstud.mcTC[[3]]$sd / sqrt(Dstud.mcTC[[3]]$n))
)
S.beta.dif.34 <- getDifParam(
Dstud.S[[3]]$mu,
(Dstud.S[[3]]$sd / sqrt(Dstud.S[[3]]$n)),
Dstud.S[[4]]$mu,
(Dstud.S[[4]]$sd / sqrt(Dstud.S[[4]]$n))
)
S.beta.1
S.beta.2
S.beta.3
S.beta.4
S.beta.dif.12
S.beta.dif.23
S.beta.dif.34
rbeta(N.PSA, S.beta.1$a, S.beta.1$b)
rbeta(N.psa, S.beta.1$a, S.beta.1$b)
N.PSA <- 10000
rbeta(N.PSA, S.beta.1$a, S.beta.1$b)
plot(density(rbeta(N.PSA, S.beta.1$a, S.beta.1$b)))
mean(rbeta(N.PSA, MTC.beta.1$a, MTC.beta.1$b))
mean(rbeta(N.PSA, MTC.beta.2$a, MTC.beta.2$b))
mean(rbeta(N.PSA, MTC.beta.3$a, MTC.beta.3$b))
mean(rbeta(N.PSA, MTC.beta.4$a, MTC.beta.4$b))
sd(rbeta(N.PSA, MTC.beta.1$a, MTC.beta.1$b))
sd(rbeta(N.PSA, MTC.beta.2$a, MTC.beta.2$b))
sd(rbeta(N.PSA, MTC.beta.3$a, MTC.beta.3$b))
sd(rbeta(N.PSA, MTC.beta.4$a, MTC.beta.4$b))
mean(rbeta(N.PSA, S.beta.1$a, S.beta.1$b))
mean(rbeta(N.PSA, S.beta.2$a, S.beta.2$b))
mean(rbeta(N.PSA, S.beta.3$a, S.beta.3$b))
mean(rbeta(N.PSA, S.beta.4$a, S.beta.4$b))
sd(rbeta(N.PSA, S.beta.1$a, S.beta.1$b))
sd(rbeta(N.PSA, S.beta.2$a, S.beta.2$b))
sd(rbeta(N.PSA, S.beta.3$a, S.beta.3$b))
sd(rbeta(N.PSA, S.beta.4$a, S.beta.4$b))
mean(rbeta(N.PSA, MTC.beta.dif.12$a, MTC.beta.dif.12$b))
mean(rbeta(N.PSA, MTC.beta.dif.23$a, MTC.beta.dif.23$b))
mean(rbeta(N.PSA, MTC.beta.dif.34$a, MTC.beta.dif.34$b))
mean(rbeta(N.PSA, S.beta.dif.12$a, S.beta.dif.12$b))
mean(rbeta(N.PSA, S.beta.dif.23$a, S.beta.dif.23$b))
mean(rbeta(N.PSA, S.beta.dif.34$a, S.beta.dif.34$b))
S.beta.dif.13 <- getDifParam(
Dstud.S[[1]]$mu,
(Dstud.S[[1]]$sd / sqrt(Dstud.S[[1]]$n)),
Dstud.S[[3]]$mu,
(Dstud.S[[3]]$sd / sqrt(Dstud.S[[3]]$n))
)
S.beta.dif.13
mean(rbeta(N.PSA, S.beta.dif.13$a, S.beta.dif.13$b))
S.beta.dif.23 <- getDifParam(
Dstud.S[[2]]$mu,
(Dstud.S[[2]]$sd / sqrt(Dstud.S[[2]]$n)),
Dstud.S[[3]]$mu,
(Dstud.S[[3]]$sd / sqrt(Dstud.S[[3]]$n))
)
S.beta.dif.23
mean(rbeta(N.PSA, S.beta.dif.23$a, S.beta.dif.23$b))
