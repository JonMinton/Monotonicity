out <- sapply(X = y, mean)
out_df[i,] <- out
}
colnames(out_df) <- colnames(x)
out_df %>% data.frame %>% tbl_df
}
out[[length(out)+1]] <- data_2d  %>%
bootstrap_data(n_rep = N_PSA)
colnames(out[[length(out)]]) <- c("u1", "u2")
names(out) <-         c(
"Independent",                  "Quantile Matching",
"Replication\n(Upwards)",     "Replication\n(Downwards)",       "Resampling\n(Upwards)",
"Resampling\n(Downwards)",        "Resampling\n(Both)",           "AIVM",
"Covariance Fitting\n(Lower Bounded)",  "Covariance Fitting\n(Upper Bounded)",
"Difference\n(Upwards)",      "Difference\n(Downwards)", "Bootstrapped"
)
draws_df <- ldply(out) %>% tbl_df %>%
dplyr::rename(method = .id) %>%
mutate(difference=u1-u2) %>%
filter(
method!="Covariance Fitting\n(Lower Bounded)" &
method!="Covariance Fitting\n(Upper Bounded)" &
method!="AIVM"
)
draws_df$method <- factor(draws_df$method,
levels=c("Bootstrapped", "Independent", "Resampling\n(Downwards)",
"Resampling\n(Upwards)", "Resampling\n(Both)", "Replication\n(Downwards)",
"Replication\n(Upwards)", "Quantile Matching",
"Difference\n(Downwards)", "Difference\n(Upwards)")
)
draws_long <- draws_df %>%
gather(key=variable, value=value, -method)
# Summaries ---------------------------------------------------------------
summaries_mean_sd <- draws_df %>%
group_by(method) %>%
dplyr::summarise(
u1.mean=mean(u1),
u1.sd=sd(u1),
u2.mean=mean(u2),
u2.sd=sd(u2),
dif.mean=mean(difference),
dif.sd =sd(difference)
)
# Quantiles
draws_boot <- draws_long %>% tbl_df %>%
dplyr::filter(method=="Bootstrapped")
draws_nonboot <- draws_long %>%
tbl_df %>%
dplyr::filter(method!="Bootstrapped") %>%
group_by(method, variable)
fn <- function(x){
values <- x$value
boot_values <- draws_boot  %>% filter(variable==x$variable[1])  %>% .$value
boot_quantiles <- boot_values  %>%
quantile(seq(from=0.025, 0.975, 0.05))
this_quantiles <- values %>%
quantile(probs=seq(from=0.025, 0.975, 0.05))
out <- (boot_quantiles - this_quantiles)  %>%
.^2 %>%
mean %>%
.^0.5
return(data.frame(rms=out))
}
summaries_rms <- draws_nonboot  %>%
group_by(method, variable)  %>%
do(fn(.)) %>%
spread(variable, rms)
# Figures -----------------------------------------------------------------
### Figures now
# Toy example:
#tiff("figures/fig_01.tiff", 300,300)
# toy_data <- data.frame(
#     bad=rnorm(10000, 0.05, 1.0),
#     good=rnorm(10000, 0.6, 0.4)
# )
#
# g <- ggplot(toy_data) +
#     geom_density(aes(x=bad), fill="red", alpha=0.6) +
#     geom_density(aes(x=good), fill="blue", alpha=0.2)
#
#
# theme_myblank <- theme(axis.line=element_blank(),
#                        axis.text.x=element_blank(),
#                        axis.text.y=element_blank(),
#                        axis.ticks=element_blank(),
#                        axis.title.x=element_blank(),
#                        axis.title.y=element_blank(),
#                        legend.position="none",
#                        panel.background=element_blank(),
#                        panel.border=element_blank(),
#                        panel.grid.major=element_blank(),
#                        panel.grid.minor=element_blank(),
#                        plot.background=element_blank())
#
# g2 <- g + theme_myblank
#
# print(g2)
# ggsave("figures/fig_01.tiff", height=2, width=2, dpi=300)
#dev.off()
# The IPD itself
#tiff("figures/fig_02.tiff", 500, 500)
fig1a <- ggplot(data=data_2d, aes(x=u2, y=u1)) +
geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1) +
geom_point() +
xlab("Lower parameter") + ylab("Higher parameter") +
coord_fixed(xlim=c(0,1), ylim=c(0,1))
# print(g)
# ggsave("figures/brief_report_fig_01.tiff", height=10, width=10, units = "cm", dpi=300)
#dev.off()
#tiff("figures/fig_03.tiff", 1100,1100)
# g <- draws_df %>% tbl_df %>%
#     ggplot(aes(x=u1, y=u2)) +
#     geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1) +
#     geom_point(alpha=0.1) +
#     facet_wrap(~ method, nrow=3) +
#     coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7)) +
#     xlab("Higher parameter") + ylab("Lower parameter") +
#     theme(text=element_text(size=16))
# print(g)
#
# ggsave("figures/fig_03.tiff", height=7, width=7, dpi=300)
#dev.off()
# tiff("figures/fig_04.tiff", 1200, 800)
#
# g <- draws_df %>%
#     filter(method!="Bootstrapped") %>%
#     ggplot(aes(x=u1)) +
#     geom_density(fill="grey") +
#     facet_wrap("method", nrow=4) +
#     geom_density(
#         aes(x=subset(draws_df, subset=method=="Bootstrapped")$u1),
#         col="blue", width=1.1, lty="dashed"
#     ) +
#     xlab("Distribution of estimates for higher parameter")
# print(g)
# dev.off()
#
#
# # u2 : worse health state
# tiff("figures/fig_05.tiff", 1200, 800)
# g <- draws_df %>%
#     filter(method!="Bootstrapped") %>%
#     ggplot(aes(x=u2)) +
#     geom_density(fill="grey") +
#     facet_wrap("method", nrow=4) +
#     geom_density(
#         aes(x=subset(draws_df, method=="Bootstrapped")$u2),
#         col="blue", width=1.1, lty="dashed"
#     ) +
#     xlab("Distribution of estimates for lower parameter")
# print(g)
# dev.off()
# difference
#tiff("figures/fig_04.tiff", 1200, 800)
# g <- draws_df %>%
#     filter(method!="Bootstrapped") %>%
#     ggplot(aes(x=difference)) +
#     geom_density(fill="grey") +
#     facet_wrap("method", nrow=4) +
#     geom_density(
#         aes(x=subset(draws_df, method=="Bootstrapped")$difference),
#         col="blue", width=1.2, lty="dashed", trim=T
#     ) +
#     xlab("Distribution of differences in paired estimates") +
#     coord_cartesian(ylim=c(0,100)) +
#     geom_vline(mapping=aes(x=0), colour="red")
# print(g)
# ggsave("figures/fig_04.tiff", height=7, width=7, dpi=300)
#dev.off()
# additional (now unused) -------------------------------------------------
# Fig 2 should have three parts
# fig 2a : scatterplot
# fig 2b : density plot - done
# fig 2c : RMS difference
draws_df  %>%
filter(method %in% c("Bootstrapped", "Independent", "Difference\n(Upwards)"))  %>%
mutate(method = str_replace_all(method, "Difference\n\\(Upwards\\)", "Difference")) %>%
ggplot(., aes(x = u2, y = u1)) +
facet_wrap(~method) +
geom_point(shape = ".") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(x = "Estimate of lower parameter", y = "Estimate of higher parameter") +
lims(x = c(0.40, 0.80), y= c(0.40, 0.80)) -> fig1b
draws_df  %>%
filter(method %in% c("Bootstrapped", "Independent", "Difference\n(Upwards)"))  %>%
mutate(method = str_replace_all(method, "Difference\n\\(Upwards\\)", "Difference")) %>%
ggplot(., aes(x = difference)) +
facet_wrap(~method) +
geom_density() +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = "Paired difference between higher and lower values", y = "Density of estimated values") -> fig1c
class(summaries_rms) <- "data.frame"
tmp <- summaries_rms %>%
gather(key=variable, value=value, -method)
# Want values reordered by mean rms error
# tmp <- summaries_rms %>%
#     mutate(avg=(u1+u2+difference)/3)  %>%
#     arrange(avg)
# Fig 2 in main MS. Independent vs DM
tmp %>%
#    gather(key=variable, value=value, -method) %>%
filter(method %in% c("Independent", "Difference\n(Upwards)")) %>%
mutate(variable = car::recode(variable, "'difference' = 'Difference'; 'u1' = 'Higher Parameter'; 'u2' = 'Lower Parameter'")) %>%
mutate(method = str_replace(method, "\n\\(Upwards\\)", "")) %>%
spread(variable, value) %>%
mutate(avg = (`Difference` + `Higher Parameter` + `Lower Parameter`)/ 3) %>%
arrange(avg) -> tmp
tmp$method <- factor(tmp$method, levels=tmp[order(tmp$avg), "method"])
tmp <- tmp %>% select(-avg) %>%
gather(key = Variable, value = value, -method)
tmp %>%
ggplot(aes(x=value, y=method, group = Variable, shape = Variable)) +
geom_segment(aes(x=0, xend=value, y=method, yend=method), linetype="dashed") +
geom_point(size=3) +
#    facet_wrap ( ~ variable) +
labs (x="Root mean squared error", y="Method") +
theme(
panel.grid.major = element_line(colour = "grey", size = 0.5),
legend.position = c(0.80, 0.15)
) -> fig1d
plot_grid(fig1a, fig1b, fig1c, fig1d, labels =c("A", "B", "C", "D"))
ggsave("figures/brief_report_fig_02.tiff", height = 25, width = 25, units = "cm", dpi = 300)
ggsave("figures/brief_report_fig_02.png", height = 25, width = 25, units = "cm", dpi = 300)
install.packages("car")
# New main script for Monotonicity analysis generation
# 26/2/2015
# Set up ------------------------------------------------------------------
rm(list=ls())
# Load prerequisites
require(pacman)
pacman::p_load(
MASS,
xlsx,
plyr,
stringr, tidyr, dplyr,
reshape,
gdata,
devtools,
tables,
ggplot2,
cowplot
)
source("scripts/functions.r")
N_PSA <- 10000
# Input Data --------------------------------------------------------------
data_2d <- data_frame(
u1=
c(0.736, 0.698, 0.756, 0.638, 0.646,
0.619, 0.800, 0.411, 0.664, 0.513,
0.594, 0.371, 0.608, 0.528, 0.823,
0.682, 0.462, 0.576, 0.572, 0.607,
0.542, 0.625, 0.694, 0.512, 0.591,
0.559, 0.588, 0.766, 0.551, 0.256
),
u2=
c(0.700, 0.625, 0.719, 0.594, 0.565,
0.565, 0.779, 0.363, 0.540, 0.500,
0.532, 0.300, 0.572, 0.420, 0.810,
0.650, 0.457, 0.517, 0.495, 0.561,
0.481, 0.610, 0.603, 0.463, 0.551,
0.450, 0.550, 0.647, 0.491, 0.150
)
)
fn <- function(x, n_dp=3){
mu <- x %>%
mean %>%
round(n_dp)
n_obs <- length(x)
upper_975 <- mean(x) + 1.96 * sd(x)/sqrt(n_obs)
se=((upper_975 - mean(x))/1.96) %>%
round(n_dp)
out <- list(mu=mu, se=se)
return(out)
}
data_summaries <- data_2d %>%
apply(2, fn)
# Analyses ----------------------------------------------------------------
out <- lapply(
1:12,
function(x) {create_draws(data_summaries, x, n_psa=N_PSA)}
)
#Bootstrap function
bootstrap_data <- function(x, n_rep = 1000){
k <- ncol(x)
N <- nrow(x)
out_df <- matrix(NA, nrow = n_rep, ncol = k)
for (i in seq_along(1:n_rep)){
rows_to_sample <- sample(seq_along(1:N), replace = T)
y <- x[rows_to_sample,]
out <- sapply(X = y, mean)
out_df[i,] <- out
}
colnames(out_df) <- colnames(x)
out_df %>% data.frame %>% tbl_df
}
out[[length(out)+1]] <- data_2d  %>%
bootstrap_data(n_rep = N_PSA)
colnames(out[[length(out)]]) <- c("u1", "u2")
names(out) <-         c(
"Independent",                  "Quantile Matching",
"Replication\n(Upwards)",     "Replication\n(Downwards)",       "Resampling\n(Upwards)",
"Resampling\n(Downwards)",        "Resampling\n(Both)",           "AIVM",
"Covariance Fitting\n(Lower Bounded)",  "Covariance Fitting\n(Upper Bounded)",
"Difference\n(Upwards)",      "Difference\n(Downwards)", "Bootstrapped"
)
draws_df <- ldply(out) %>% tbl_df %>%
dplyr::rename(method = .id) %>%
mutate(difference=u1-u2) %>%
filter(
method!="Covariance Fitting\n(Lower Bounded)" &
method!="Covariance Fitting\n(Upper Bounded)" &
method!="AIVM"
)
draws_df$method <- factor(draws_df$method,
levels=c("Bootstrapped", "Independent", "Resampling\n(Downwards)",
"Resampling\n(Upwards)", "Resampling\n(Both)", "Replication\n(Downwards)",
"Replication\n(Upwards)", "Quantile Matching",
"Difference\n(Downwards)", "Difference\n(Upwards)")
)
draws_long <- draws_df %>%
gather(key=variable, value=value, -method)
# Summaries ---------------------------------------------------------------
summaries_mean_sd <- draws_df %>%
group_by(method) %>%
dplyr::summarise(
u1.mean=mean(u1),
u1.sd=sd(u1),
u2.mean=mean(u2),
u2.sd=sd(u2),
dif.mean=mean(difference),
dif.sd =sd(difference)
)
# Quantiles
draws_boot <- draws_long %>% tbl_df %>%
dplyr::filter(method=="Bootstrapped")
draws_nonboot <- draws_long %>%
tbl_df %>%
dplyr::filter(method!="Bootstrapped") %>%
group_by(method, variable)
fn <- function(x){
values <- x$value
boot_values <- draws_boot  %>% filter(variable==x$variable[1])  %>% .$value
boot_quantiles <- boot_values  %>%
quantile(seq(from=0.025, 0.975, 0.05))
this_quantiles <- values %>%
quantile(probs=seq(from=0.025, 0.975, 0.05))
out <- (boot_quantiles - this_quantiles)  %>%
.^2 %>%
mean %>%
.^0.5
return(data.frame(rms=out))
}
summaries_rms <- draws_nonboot  %>%
group_by(method, variable)  %>%
do(fn(.)) %>%
spread(variable, rms)
# Figures -----------------------------------------------------------------
### Figures now
# Toy example:
#tiff("figures/fig_01.tiff", 300,300)
# toy_data <- data.frame(
#     bad=rnorm(10000, 0.05, 1.0),
#     good=rnorm(10000, 0.6, 0.4)
# )
#
# g <- ggplot(toy_data) +
#     geom_density(aes(x=bad), fill="red", alpha=0.6) +
#     geom_density(aes(x=good), fill="blue", alpha=0.2)
#
#
# theme_myblank <- theme(axis.line=element_blank(),
#                        axis.text.x=element_blank(),
#                        axis.text.y=element_blank(),
#                        axis.ticks=element_blank(),
#                        axis.title.x=element_blank(),
#                        axis.title.y=element_blank(),
#                        legend.position="none",
#                        panel.background=element_blank(),
#                        panel.border=element_blank(),
#                        panel.grid.major=element_blank(),
#                        panel.grid.minor=element_blank(),
#                        plot.background=element_blank())
#
# g2 <- g + theme_myblank
#
# print(g2)
# ggsave("figures/fig_01.tiff", height=2, width=2, dpi=300)
#dev.off()
# The IPD itself
#tiff("figures/fig_02.tiff", 500, 500)
fig1a <- ggplot(data=data_2d, aes(x=u2, y=u1)) +
geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1) +
geom_point() +
xlab("Lower parameter") + ylab("Higher parameter") +
coord_fixed(xlim=c(0,1), ylim=c(0,1))
# print(g)
# ggsave("figures/brief_report_fig_01.tiff", height=10, width=10, units = "cm", dpi=300)
#dev.off()
#tiff("figures/fig_03.tiff", 1100,1100)
# g <- draws_df %>% tbl_df %>%
#     ggplot(aes(x=u1, y=u2)) +
#     geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1) +
#     geom_point(alpha=0.1) +
#     facet_wrap(~ method, nrow=3) +
#     coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7)) +
#     xlab("Higher parameter") + ylab("Lower parameter") +
#     theme(text=element_text(size=16))
# print(g)
#
# ggsave("figures/fig_03.tiff", height=7, width=7, dpi=300)
#dev.off()
# tiff("figures/fig_04.tiff", 1200, 800)
#
# g <- draws_df %>%
#     filter(method!="Bootstrapped") %>%
#     ggplot(aes(x=u1)) +
#     geom_density(fill="grey") +
#     facet_wrap("method", nrow=4) +
#     geom_density(
#         aes(x=subset(draws_df, subset=method=="Bootstrapped")$u1),
#         col="blue", width=1.1, lty="dashed"
#     ) +
#     xlab("Distribution of estimates for higher parameter")
# print(g)
# dev.off()
#
#
# # u2 : worse health state
# tiff("figures/fig_05.tiff", 1200, 800)
# g <- draws_df %>%
#     filter(method!="Bootstrapped") %>%
#     ggplot(aes(x=u2)) +
#     geom_density(fill="grey") +
#     facet_wrap("method", nrow=4) +
#     geom_density(
#         aes(x=subset(draws_df, method=="Bootstrapped")$u2),
#         col="blue", width=1.1, lty="dashed"
#     ) +
#     xlab("Distribution of estimates for lower parameter")
# print(g)
# dev.off()
# difference
#tiff("figures/fig_04.tiff", 1200, 800)
# g <- draws_df %>%
#     filter(method!="Bootstrapped") %>%
#     ggplot(aes(x=difference)) +
#     geom_density(fill="grey") +
#     facet_wrap("method", nrow=4) +
#     geom_density(
#         aes(x=subset(draws_df, method=="Bootstrapped")$difference),
#         col="blue", width=1.2, lty="dashed", trim=T
#     ) +
#     xlab("Distribution of differences in paired estimates") +
#     coord_cartesian(ylim=c(0,100)) +
#     geom_vline(mapping=aes(x=0), colour="red")
# print(g)
# ggsave("figures/fig_04.tiff", height=7, width=7, dpi=300)
#dev.off()
# additional (now unused) -------------------------------------------------
# Fig 2 should have three parts
# fig 2a : scatterplot
# fig 2b : density plot - done
# fig 2c : RMS difference
draws_df  %>%
filter(method %in% c("Bootstrapped", "Independent", "Difference\n(Upwards)"))  %>%
mutate(method = str_replace_all(method, "Difference\n\\(Upwards\\)", "Difference")) %>%
ggplot(., aes(x = u2, y = u1)) +
facet_wrap(~method) +
geom_point(shape = ".") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(x = "Estimate of lower parameter", y = "Estimate of higher parameter") +
lims(x = c(0.40, 0.80), y= c(0.40, 0.80)) -> fig1b
draws_df  %>%
filter(method %in% c("Bootstrapped", "Independent", "Difference\n(Upwards)"))  %>%
mutate(method = str_replace_all(method, "Difference\n\\(Upwards\\)", "Difference")) %>%
ggplot(., aes(x = difference)) +
facet_wrap(~method) +
geom_density() +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = "Paired difference between higher and lower values", y = "Density of estimated values") -> fig1c
class(summaries_rms) <- "data.frame"
tmp <- summaries_rms %>%
gather(key=variable, value=value, -method)
# Want values reordered by mean rms error
# tmp <- summaries_rms %>%
#     mutate(avg=(u1+u2+difference)/3)  %>%
#     arrange(avg)
# Fig 2 in main MS. Independent vs DM
tmp %>%
#    gather(key=variable, value=value, -method) %>%
filter(method %in% c("Independent", "Difference\n(Upwards)")) %>%
mutate(variable = car::recode(variable, "'difference' = 'Difference'; 'u1' = 'Higher Parameter'; 'u2' = 'Lower Parameter'")) %>%
mutate(method = str_replace(method, "\n\\(Upwards\\)", "")) %>%
spread(variable, value) %>%
mutate(avg = (`Difference` + `Higher Parameter` + `Lower Parameter`)/ 3) %>%
arrange(avg) -> tmp
tmp$method <- factor(tmp$method, levels=tmp[order(tmp$avg), "method"])
tmp <- tmp %>% select(-avg) %>%
gather(key = Variable, value = value, -method)
tmp %>%
ggplot(aes(x=value, y=method, group = Variable, shape = Variable)) +
geom_segment(aes(x=0, xend=value, y=method, yend=method), linetype="dashed") +
geom_point(size=3) +
#    facet_wrap ( ~ variable) +
labs (x="Root mean squared error", y="Method") +
theme(
panel.grid.major = element_line(colour = "grey", size = 0.5),
legend.position = c(0.80, 0.15)
) -> fig1d
plot_grid(fig1a, fig1b, fig1c, fig1d, labels =c("A", "B", "C", "D"))
ggsave("figures/brief_report_fig_02.tiff", height = 25, width = 25, units = "cm", dpi = 300)
ggsave("figures/brief_report_fig_02.png", height = 25, width = 25, units = "cm", dpi = 300)
