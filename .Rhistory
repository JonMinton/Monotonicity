panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
g2 <- g + theme_myblank
print(g2)
dev.off()
# Toy example:
tiff("figures/fig_01.tiff", 300,300)
toy_data <- data.frame(
bad=rnorm(10000, 0.20, 1.0),
good=rnorm(10000, 0.6, 0.4)
)
g <- ggplot(toy_data) + geom_density(aes(x=bad), fill="red", alpha=0.6) + geom_density(aes(x=good), fill="blue", alpha=0.2)
theme_myblank <- theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
g2 <- g + theme_myblank
print(g2)
dev.off()
#The models
?xtable
library(xtable)
?xtable
library(knitr)
?kable
![](../Figures/fig_05.tiff "lower")
![](../Figures/fig_05.tiff "lower")
Data.3D <- read.csv("Data/Raw/Data_3D.csv")
Data.3D <- read.csv("Data/Raw/Data_3D.csv")
Data.3D <- read.csv("Data/Raw/Data_3D.csv")
getwd()
?geom_abline
?coord
?xlim
?limits
qplot(data=Data.3D, y=U3, x=U2) + geom_abline(intercept=0, slope=1, colour="red") + xlim(c(0,1)) + ylim(c(0,1))
setwd("E:/repos/Monotonicity/")
Data.3D <- read.csv("Data/Raw/Data_3D.csv")
data_2d <- Data.3D[,-U1]
names(data_2d) <- c("observation", "u1", "u2")
library(knitr)
library(ggplot2)
qplot(data=data_2d, y=U2, x=U1) + geom_abline(intercept=0, slope=1, colour="red") + xlim(c(0,1)) + ylim(c(0,1))
setwd("E:/repos/Monotonicity/")
Data.3D <- read.csv("Data/Raw/Data_3D.csv")
data_2d <- Data.3D[,-U1]
names(data_2d) <- c("observation", "u1", "u2")
library(knitr)
library(ggplot2)
qplot(data=data_2d, y=U2, x=U1) + geom_abline(intercept=0, slope=1, colour="red") + xlim(c(0,1)) + ylim(c(0,1))
setwd("E:/repos/Monotonicity/")
Data.3D <- read.csv("Data/Raw/Data_3D.csv")
data_2d <- Data.3D[,-U1]
names(Data.3D)
data_2d <- Data.3D[,-"U1""]
data_2d <- Data.3D[,-"U1"]
data_2d <- Data.3D[,-c("U1")]
data_2d <- subset(Data.3D, select=-U1)
names(data_2d) <- c("observation", "u1", "u2")
library(knitr)
library(ggplot2)
qplot(data=data_2d, y=U2, x=U1) + geom_abline(intercept=0, slope=1, colour="red") + xlim(c(0,1)) + ylim(c(0,1))
qplot(data=data_2d, y=u2, x=u1) + geom_abline(intercept=0, slope=1, colour="red") + xlim(c(0,1)) + ylim(c(0,1))
setwd("E:/repos/Monotonicity/")
Data.3D <- read.csv("Data/Raw/Data_3D.csv")
data_2d <- subset(Data.3D, select=-U1)
names(data_2d) <- c("observation", "u1", "u2")
library(knitr)
library(ggplot2)
qplot(data=data_2d, y=u2, x=u1) + geom_abline(intercept=0, slope=1, colour="red") + xlim(c(0,1)) + ylim(c(0,1))
source("scripts/functions.r")
#######################################################################################################
######################### GLOBAL VARIABLES ############################################################
#######################################################################################################
# Global variables will be ALL UPPERCASE to distinguish them from other variables
N_PSA <- 10000
# The following parameter should be set to TRUE if you want various calibration parameters
# generated by implementing various methods to be 'thrown' while the methods are being
# implemented then 'caught' by an object called 'sponge'
THROW_FACTS <- FALSE
if (THROW_FACTS) sponge <- c()
data_summaries <- summarise_ipd(
data_2d
)
data_block <- make_block(
ipd=data_2d,
summary_data=data_summaries,
n_psa=N_PSA,
methods_labels=c(
"Independent",
"Quantile Matching",
"Replication\n(Upwards)",
"Replication\n(Downwards)",
"Resampling\n(Upwards)",
"Resampling\n(Downwards)",
"AIVM",
"Covariance Fitting\n(Lower Bounded)",
"Covariance Fitting\n(Upper Bounded)",
"Difference\n(Upwards)",
"Difference\n(Downwards)"
),
quietly=F
)
setwd("E:/repos/Monotonicity/")
data_2d_alt <- data.frame(
observation=1:20,
lower=c(
0.490, 0.387, 0.507, 0.230, 0.602,
0.852, 0.334, 0.105, 0.226, 0.250,
0.815, 0.042, 0.667, 0.668, 0.668,
0.308, 0.602, 0.881, 0.500, 0.725
),
upper=c(
0.492, 0.402, 0.602, 0.302, 0.610,
0.902, 0.502, 0.207, 0.358, 0.302,
0.962, 0.101, 0.702, 0.775, 0.702,
0.502, 0.628, 0.884, 0.502, 0.802
)
)
library(knitr)
library(ggplot2)
qplot(data=data_2d_alt, y=upper, x=lower) + geom_abline(intercept=0, slope=1, colour="red") + xlim(c(0,1)) + ylim(c(0,1))
# New main script for Monotonicity analysis generation
# 29/5/2014
# Example using alternative 2d data
##############################
rm(list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
#######################################################################################################
######################### GLOBAL VARIABLES ############################################################
#######################################################################################################
# Global variables will be ALL UPPERCASE to distinguish them from other variables
N_PSA <- 10000
# The following parameter should be set to TRUE if you want various calibration parameters
# generated by implementing various methods to be 'thrown' while the methods are being
# implemented then 'caught' by an object called 'sponge'
THROW_FACTS <- FALSE
if (THROW_FACTS) sponge <- c()
#######################################################################################################
######################### MAIN SECTION ############################################################
#######################################################################################################
source("Scripts/manage_data_alt.r")
####
source("scripts/make_summaries_dataframes.r")
source("scripts/Make_Figures_alt.R")
source("Scripts/Manage_Data_alt.r")
source("scripts/read_data_alt.r")
print("Not found Samples Data. Creating from scratch")
source("scripts/make_sample_data_alt.r")
print("Not found Samples Data. Creating from scratch")
source("scripts/make_sample_data.r")
source("scripts/read_data_alt.r")
source("scripts/make_sample_data.r")
rm(list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
N_PSA <- 10000
THROW_FACTS <- FALSE
if (THROW_FACTS) sponge <- c()
source("Scripts/Manage_Data_alt.r")
source("scripts/read_data_alt.r")
source("scripts/make_sample_data_alt.r")
print("Saving created data")
save(data_long, data_wide, file="data/robj/samples_2d_alt.rdata")
source("scripts/make_summaries_dataframes.r")
source("scripts/Make_Figures_alt.R")
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point()
g4 <- g3 + xlab("Higher parameter") + ylab("Lower parameter")
g5 <- g4 + coord_fixed(xlim=c(0,1), ylim=c(0,1))
print(g5)
samples <- sample(
unique(data_wide$sample),
min(2500, length(unique(data_wide$sample)))
)
d_wide_ss <- subset(data_wide, subset=sample %in% samples)
g <- ggplot(data=d_wide_ss, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=d_wide_ss, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.1, 0.9), ylim=c(0.1, 0.9))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=d_wide_ss, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.25, 0.80), ylim=c(0.25, 0.80))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
# New main script for Monotonicity analysis generation
# 29/5/2014
# Example using alternative 2d data
##############################
rm(list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
#######################################################################################################
######################### GLOBAL VARIABLES ############################################################
#######################################################################################################
# Global variables will be ALL UPPERCASE to distinguish them from other variables
N_PSA <- 10000
# The following parameter should be set to TRUE if you want various calibration parameters
# generated by implementing various methods to be 'thrown' while the methods are being
# implemented then 'caught' by an object called 'sponge'
THROW_FACTS <- FALSE
if (THROW_FACTS) sponge <- c()
#######################################################################################################
######################### MAIN SECTION ############################################################
#######################################################################################################
source("Scripts/Manage_Data_alt.r")
####
source("scripts/make_summaries_dataframes.r")
source("scripts/Make_Figures_alt.R")
0.35 + 2 * 0.2/(40^0.5)
0.40 1 2 * 0.15/(10^0.5)
0.40 - 2 * 0.15/(10^0.5)
?rbeta
beta_higher <- est_beta(
mu=higher_mean,
var=higher_var
)
lower_mean = 0.35
lower_var = (0.20/(40^0.5))^2
higher_mean = 0.40
higher_var = (0.15/(10^0.5))^2
n_psa=1000
# Load functions
est_beta <- function(mu, var) {
a <- mu * ((1 - mu) * (mu / var) - 1)
b <- a * ((1 - mu) / mu)
return(list(a=a, b=b))
}
get_dif_param <- function(
u1_mu, u1_sd,
u2_mu, u2_sd,
quietly=T
){
mu <- u1_mu - u2_mu
sigma2 <- ifelse(u1_sd > u2_sd, u1_sd^2 - u2_sd^2, u2_sd^2 - u1_sd^2)
x <- (1 - mu) / mu
a <- (x/sigma2-1-2*x-x^2)/(1+3*x+3*x^2+x^3)
b<-a*x
if(quietly==F){
print(a/(a+b))  # check mean of delta
print(a*b/(a+b)^2/(a+b+1))  # check variance of delta
}
return(list(a=a, b=b))
}
# If upper is simulated as lower + difference
beta_lower <- est_beta(
mu=lower_mean,
var=lower_var
)
beta_dif <-get_dif_param(
u1_mu=higher_mean,
u1_sd=higher_var^0.5,
u2_mu=lower_mean,
u2_sd=lower_var^0.5
)
sims_lower <- rbeta(n_psa, beta_lower$a, beta_lower$b)
sims_dif <- rbeta(n_psa, beta_dif$a, beta_dif$b)
outputs <- data.frame(
lower=sims_lower,
higher=sims_lower + sims_dif
)
plot(lower~ higher, data=outputs) + abline(0,1)
rm(outputs, beta_lower, beta_dif)
beta_higher <- est_beta(
mu=higher_mean,
var=higher_var
)
beta_dif <-get_dif_param(
u1_mu=lower_mean,
u1_sd=lower_var^0.5,
u2_mu=higher_mean,
u2_sd=higher_var^0.5
)
sims_higher <- rbeta(n_psa, beta_lower$a, beta_lower$b)
sims_higher <- rbeta(n_psa, beta_higher$a, beta_higher$b)
sims_dif <- rbeta(n_psa, beta_dif$a, beta_dif$b)
beta_dif <-get_dif_param(
u1_mu=higher_mean,
u1_sd=higher_var^0.5,
u2_mu=lower_mean,
u2_sd=lower_var^0.5
)
sims_higher <- rbeta(n_psa, beta_higher$a, beta_higher$b)
sims_dif <- rbeta(n_psa, beta_dif$a, beta_dif$b)
outputs <- data.frame(
lower=sims_higher - sims_dif,
higher=sims_higher
)
plot(lower~ higher, data=outputs) + abline(0,1)
qplot(data=outputs, y=lower, x=upper) + geom_abline(slope=1, intercept=0, colour="red") + lims(x=c(0,1), y=c(0,1))
library(ggplot2)
tiff("figures/fig_01.tiff", 300,300)
toy_data <- data.frame(
bad=rnorm(10000, 0.15, 1.0),
good=rnorm(10000, 0.6, 0.4)
)
g <- ggplot(toy_data) + geom_density(aes(x=bad), fill="red", alpha=0.6) + geom_density(aes(x=good), fill="blue", alpha=0.2)
theme_myblank <- theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
g2 <- g + theme_myblank
print(g2)
dev.off()
require(ggplot2)
tiff("figures/fig_01.tiff", 300,300)
toy_data <- data.frame(
bad=rnorm(10000, 0.15, 1.0),
good=rnorm(10000, 0.6, 0.4)
)
g <- ggplot(toy_data) + geom_density(aes(x=bad), fill="red", alpha=0.6) + geom_density(aes(x=good), fill="blue", alpha=0.2)
theme_myblank <- theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
g2 <- g + theme_myblank
print(g2)
dev.off()
tiff("figures/fig_01.tiff", 300,300)
toy_data <- data.frame(
bad=rnorm(10000, 0.10, 1.0),
good=rnorm(10000, 0.6, 0.4)
)
g <- ggplot(toy_data) + geom_density(aes(x=bad), fill="red", alpha=0.6) + geom_density(aes(x=good), fill="blue", alpha=0.2)
theme_myblank <- theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
g2 <- g + theme_myblank
print(g2)
dev.off()
# Toy example:
tiff("figures/fig_01.tiff", 300,300)
toy_data <- data.frame(
bad=rnorm(10000, 0.05, 1.0),
good=rnorm(10000, 0.6, 0.4)
)
g <- ggplot(toy_data) + geom_density(aes(x=bad), fill="red", alpha=0.6) + geom_density(aes(x=good), fill="blue", alpha=0.2)
theme_myblank <- theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
g2 <- g + theme_myblank
print(g2)
dev.off()
# New main script for Monotonicity analysis generation
# 29/5/2014
##### TO DO
# 1) Look again at calculation of covariance approaches
##############################
rm(list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
N_PSA <- 10000
THROW_FACTS <- FALSE
if (THROW_FACTS) sponge <- c()
#######################################################################################################
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
source("scripts/functions.r")
source("scripts/make_sample_data.r")
source("scripts/make_summaries_dataframes.r")
ls()
head(summaris_mean_sd)
head(summaries_mean_sd)
round(summaries_mean_sd, 2)
cbind(summaries_mean_sd[,1:2], round(summaries_mean_sd[,3:4], 2))
cbind(summaries_mean_sd[,1:2], round(summaries_mean_sd[,3:4], 3))
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr",
"tables"
)
)
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr",
"tables",
"tidyr",
"dplyr"
)
)
ls()
head(boot_excluded)
boot_excluded  %>% .$value
boot_excluded  %>% .$value  %>% tbl_df
boot_excluded  %>% tbl_df  %>%  .$value
