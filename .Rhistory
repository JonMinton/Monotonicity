summaries_difs_squared_long <- cbind(summaries_difs_squared_long, colsplit(summaries_difs_squared_long$variable, "_", c("var", "quantile")))
summaries_difs_squared_long <- gdata::remove.vars(summaries_difs_squared_long, "variable")
summaries_rms <- ddply(summaries_difs_squared_long, .(method, var),function(x) (rms=(mean(x$value))^0.5))
summaries_rms
summaries_rms <- arrange(summaries_rms, var, method)
summaries_rms <- rename.vars(summaries_rms, from="V1", to="value")
summaries_rms$method <- factor(summaries_rms$method,
levels=rev(levels(summaries_rms$method))
)
summaries_rms <- recast(summaries_rms, method ~ var)
summaries_rms <- summaries_rms[c("method", "u1", "u2", "difference")]
summaries_rms
ls()
names(data_2d)
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g2 <- g + geom_point()
print(g2)
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g2 <- g + geom_point()
g3 <- g2 + xlab("Higher parameter") + ylab("Lower parameter")
g4 <- g3 + coord_fixed(xlim=c(0,1), ylim=c(0,1))
print(g4)
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g2 <- g + geom_point()
g3 <- g2 + xlab("Higher parameter") + ylab("Lower parameter")
g4 <- g3 + coord_fixed(xlim=c(0,1), ylim=c(0,1))
g5 <- g4 + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
print(g5)
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point()
g4 <- g3 + xlab("Higher parameter") + ylab("Lower parameter")
g5 <- g4 + coord_fixed(xlim=c(0,1), ylim=c(0,1))
print(g5)
# The IPD itself
tiff("figures/fig_02.tiff", 500, 500)
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point()
g4 <- g3 + xlab("Higher parameter") + ylab("Lower parameter")
g5 <- g4 + coord_fixed(xlim=c(0,1), ylim=c(0,1))
print(g5)
dev.off()
g <- ggplot(data=data_wide, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point() + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=data_wide[1:1000,], aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g3 <- g2 + geom_point() + facet_wrap(~ method, nrow=3)
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=data_wide[1:1000,], aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point() + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=data_wide[1:1000,], aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point() + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
head(data_wide)
g <- ggplot(data=subset(data_wide, subset=sample <=1000), aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point() + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=subset(data_wide, subset=sample <=2000), aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point() + facet_wrap(~ method, nrow=3)
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=subset(data_wide, subset=sample <=2000), aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.2) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=subset(data_wide, subset=sample <=5000), aes(x=u1, y=u2))
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(data=data_wide, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
tiff("figures/fig_03.tiff", 1100,1100)
g <- ggplot(data=subset(data_wide, subset=sample <=2000, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
g <- ggplot(data=subset(data_wide, subset=sample <=2000), aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
dev.off()
g <- ggplot(subset(data_wide, subset=method!="Bootstrapped" & sample <=2000), aes(x=u1)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(aes(x=subset(data_wide, method=="Bootstrapped")$u1), col="blue", width=1.1, lty="dashed")
g4 <- g3 + xlab("Distribution of estimates for higher parameter")
print(g4)
g <- ggplot(subset(data_wide, subset=method!="Bootstrapped" & sample <=2000), aes(x=u1)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(aes(x=subset(data_wide, subset=method=="Bootstrapped" & sample <=2000)$u1), col="blue", width=1.1, lty="dashed")
g4 <- g3 + xlab("Distribution of estimates for higher parameter")
print(g4)
g <- ggplot(subset(data_wide, subset=method!="Bootstrapped"), aes(x=u1)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(aes(x=subset(data_wide, subset=method=="Bootstrapped")$u1), col="blue", width=1.1, lty="dashed")
g4 <- g3 + xlab("Distribution of estimates for higher parameter")
print(g4)
g <- ggplot(subset(data_wide, method!="Bootstrapped"), aes(x=u2)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(aes(x=subset(data_wide, method=="Bootstrapped")$u2), col="blue", width=1.2, lty="dashed")
g4 <- g3 + xlab("Distribution of estimates for lower parameter")
print(g4)
g <- ggplot(subset(data_wide, method!="Bootstrapped"), aes(x=difference)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(
aes(x=subset(data_wide, method=="Bootstrapped")$difference),
col="blue", width=1.2, lty="dashed",
trim=T
)
g4 <- g3 + xlab("Distribution of differences in paired estimates")
g5 <- g4 + coord_cartesian(ylim=c(0,100))
g6 <- g5 + geom_vline(mapping=aes(x=0), colour="red")
print(g6)
?qbeta
##############################
rm (list=ls())
#
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
source("scripts/functions.r")
N_PSA <- 100000
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
gc()
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
memory.limit()
rm (list=ls())
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
source("scripts/functions.r")
N_PSA <- 100000
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
# New main script for Monotonicity analysis generation
# 29/5/2014
##### TO DO
# 1) Look again at calculation of covariance approaches
##############################
rm (list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
N_PSA <- 100000
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
data_summaries <- summarise_ipd(
data_2d
)
data_block <- make_block(
ipd=data_2d,
summary_data=data_summaries,
n_psa=N_PSA,
methods.labels=c(
"Independent",
"Quantile Matching",
"Replication\n(Upwards)",
"Replication\n(Downwards)",
"Resampling\n(Upwards)",
"Resampling\n(Downwards)",
"AIVM",
"Covariance Fitting\n(Lower Bounded)",
"Covariance Fitting\n(Upper Bounded)",
"Difference\n(Upwards)",
"Difference\n(Downwards)"
)
)
length(data_block)
head(data_block[[1]])
head(data_block[[2]][[1]])
head(data_block[[2]][[2]])
head(data_block[[2]][[3]])
head(data_block[[2]][[4]])
head(data_block[[2]][[5]])
head(data_block[[2]][[6]])
head(data_block[[2]][[7]])
names(data_block[[2]])
names(data_block[[1]])
# New main script for Monotonicity analysis generation
# 29/5/2014
##### TO DO
# 1) Look again at calculation of covariance approaches
##############################
rm (list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
N_PSA <- 100000
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
names(method_block)
names(data_block)
# New main script for Monotonicity analysis generation
# 29/5/2014
##### TO DO
# 1) Look again at calculation of covariance approaches
##############################
rm (list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
#######################################################################################################
######################### GLOBAL VARIABLES ############################################################
#######################################################################################################
# Global variables will be ALL UPPERCASE to distinguish them from other variables
N_PSA <- 100000
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
names(data_block)
head(data_block[[1]])
head(data_block[[2]])
head(data_block[[3]])
head(data_block[[4]])
head(data_block[[5]])
head(data_block[[6]])
head(data_block[[7]])
head(data_block[[8]])
head(data_block[[9]])
head(data_block[[10]])
head(data_block[[11]])
head(data_block[[12]])
tmp <- ldply(data_block)
# New main script for Monotonicity analysis generation
# 29/5/2014
##### TO DO
# 1) Look again at calculation of covariance approaches
##############################
rm (list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
#######################################################################################################
######################### GLOBAL VARIABLES ############################################################
#######################################################################################################
# Global variables will be ALL UPPERCASE to distinguish them from other variables
N_PSA <- 100000
#######################################################################################################
######################### MAIN SECTION ############################################################
#######################################################################################################
source("Scripts/manage_data.r")
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
tmp <- ldply(data_block)
head(tmp)
data_wide <- ldply(data_block)
data_wide$sample <- 1:N_PSA
head(data_wide)
?rename.var
?rename
data_wide <- rename(data_wide, c(".id"="method"))
head(data_wide)
data_long <- melt(data_wide, id.var=c("method", "sample"))
head(data_long)
data_wide <- mutate(data_wide, difference=u1-u2)
data_long <- melt(data_wide, id.var=c("method", "sample"))
head(data_wide)
head(data_long)
cast(data_long, method ~ variable, length)
data_wide <- arrange(data_wide, method, sample)
head(data_wide)
data_wide <- ldply(data_block)
data_wide$sample <- 1:N_PSA
data_wide <- rename(data_wide, c(".id"="method"))
data_wide <- mutate(data_wide, difference=u1-u2)
data_wide <- ldply(data_block)
data_wide$sample <- 1:N_PSA
data_wide <- rename(data_wide, c(".id"="method"))
data_wide <- mutate(data_wide, difference=u1-u2)
data_wide <- data_wide[c("method", "sample", "u1", "u2", "difference")]
head(data_wide)
data_long <- melt(data_wide, id.var=c("method", "sample"))
save(data_long, data_wide, file="data/robj/samples_2d.rdata")
g <- ggplot(data=data_2d, aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point()
g4 <- g3 + xlab("Higher parameter") + ylab("Lower parameter")
g5 <- g4 + coord_fixed(xlim=c(0,1), ylim=c(0,1))
print(g5)
g <- ggplot(data=subset(data_wide, subset=sample <=2000), aes(x=u1, y=u2))
g2 <- g + geom_abline(intercept=0, slope=1, colour="red", lty="dashed", size=1.1)
g3 <- g2 + geom_point(alpha=0.1) + facet_wrap(~ method, nrow=3)
g4 <- g3 + coord_fixed(xlim=c(0.4, 0.7), ylim=c(0.4, 0.7))
g5 <- g4 + xlab("Higher parameter") + ylab("Lower parameter")
g6 <- g5 + theme(text=element_text(size=16))
print(g6)
g <- ggplot(subset(data_wide, subset=method!="Bootstrapped"), aes(x=u1)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(aes(x=subset(data_wide, subset=method=="Bootstrapped")$u1), col="blue", width=1.1, lty="dashed")
g4 <- g3 + xlab("Distribution of estimates for higher parameter")
print(g4)
g <- ggplot(subset(data_wide, method!="Bootstrapped"), aes(x=u2)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(aes(x=subset(data_wide, method=="Bootstrapped")$u2), col="blue", width=1.2, lty="dashed")
g4 <- g3 + xlab("Distribution of estimates for lower parameter")
print(g4)
g <- ggplot(subset(data_wide, method!="Bootstrapped"), aes(x=difference)) + geom_density(fill="grey")
g2 <- g + facet_wrap("method", nrow=4)
g3 <- g2 + geom_density(
aes(x=subset(data_wide, method=="Bootstrapped")$difference),
col="blue", width=1.2, lty="dashed",
trim=T
)
g4 <- g3 + xlab("Distribution of differences in paired estimates")
g5 <- g4 + coord_cartesian(ylim=c(0,100))
g6 <- g5 + geom_vline(mapping=aes(x=0), colour="red")
print(g6)
# New main script for Monotonicity analysis generation
# 29/5/2014
##### TO DO
# 1) Look again at calculation of covariance approaches
##############################
rm (list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### GLOBAL VARIABLES ############################################################
N_PSA <- 100000
THROW_FACTS <- TRUE
if (THROW_FACTS) sponge <- c()
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
source("scripts/functions.r")
source("scripts/functions.r")
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
?exists
# New main script for Monotonicity analysis generation
# 29/5/2014
##### TO DO
# 1) Look again at calculation of covariance approaches
##############################
rm (list=ls())
# Load prerequisites
source("scripts/LoadPackages.R")
RequiredPackages(
c(
"MASS",
"xlsx",
"ggplot2",
"reshape",
"gdata",
"devtools",
"plyr"
)
)
#######################################################################################################
######################### FUNCTIONS ###################################################################
#######################################################################################################
source("scripts/functions.r")
N_PSA <- 100000
N_PSA <- 1000000
THROW_FACTS <- TRUE
if (THROW_FACTS) sponge <- c()
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
N_PSA <- 100000
# New main script for Monotonicity analysis generation
# 29/5/2014
# 1) Look again at calculation of covariance approaches
##############################
# Load prerequisites
RequiredPackages(
"MASS",
"xlsx",
"reshape",
"gdata",
"devtools",
c(
source("scripts/LoadPackages.R")
##### TO DO
rm (list=ls())
"plyr"
"ggplot2",
)
)
#######################################################################################################
source("scripts/functions.r")
N_PSA <- 100000
THROW_FACTS <- TRUE
if (THROW_FACTS) sponge <- c()
source("scripts/read_data.r")
source("scripts/make_sample_data.r")
print("Saving created data")
save(data_long, data_wide, file="data/robj/samples_2d.rdata")
